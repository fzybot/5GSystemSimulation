//
// File: beamformingTest.cpp
//
// MATLAB Coder version            : 5.0
// C/C++ source code generated on  : 01-Dec-2021 22:35:09
//

// Include Files
#include "beamformingTest.h"
#include <cmath>

// Function Definitions

//
// Arguments    : int tre
//                int i_element
//                double *directivity_dBi
//                double *gain_dBi
// Return Type  : void
//
void beamformingTest(int, int, double *directivity_dBi, double *gain_dBi)
{
  int nm1d2;
  static const double dv[181] = { -1.5707963267948966, -1.5533430342749535,
    -1.53588974175501, -1.5184364492350666, -1.5009831567151233,
    -1.4835298641951802, -1.4660765716752369, -1.4486232791552935,
    -1.43116998663535, -1.4137166941154069, -1.3962634015954636,
    -1.3788101090755203, -1.3613568165555769, -1.3439035240356338,
    -1.3264502315156903, -1.3089969389957472, -1.2915436464758039,
    -1.2740903539558606, -1.2566370614359172, -1.2391837689159739,
    -1.2217304763960306, -1.2042771838760873, -1.1868238913561442,
    -1.1693705988362006, -1.1519173063162575, -1.1344640137963142,
    -1.1170107212763709, -1.0995574287564276, -1.0821041362364843,
    -1.064650843716541, -1.0471975511965976, -1.0297442586766543,
    -1.0122909661567112, -0.99483767363676778, -0.97738438111682457,
    -0.95993108859688125, -0.94247779607693793, -0.92502450355699462,
    -0.90757121103705141, -0.890117918517108, -0.87266462599716477,
    -0.85521133347722145, -0.83775804095727813, -0.82030474843733492,
    -0.80285145591739149, -0.78539816339744828, -0.767944870877505,
    -0.75049157835756164, -0.73303828583761843, -0.715584993317675,
    -0.69813170079773179, -0.68067840827778847, -0.66322511575784515,
    -0.64577182323790194, -0.62831853071795862, -0.6108652381980153,
    -0.59341194567807209, -0.57595865315812877, -0.55850536063818546,
    -0.54105206811824214, -0.52359877559829882, -0.50614548307835561,
    -0.48869219055841229, -0.47123889803846897, -0.4537856055185257,
    -0.43633231299858238, -0.41887902047863906, -0.40142572795869574,
    -0.38397243543875248, -0.36651914291880922, -0.3490658503988659,
    -0.33161255787892258, -0.31415926535897931, -0.29670597283903605,
    -0.27925268031909273, -0.26179938779914941, -0.24434609527920614,
    -0.22689280275926285, -0.20943951023931953, -0.19198621771937624,
    -0.17453292519943295, -0.15707963267948966, -0.13962634015954636,
    -0.12217304763960307, -0.10471975511965977, -0.087266462599716474,
    -0.069813170079773182, -0.052359877559829883, -0.034906585039886591,
    -0.017453292519943295, 0.0, 0.017453292519943295, 0.034906585039886591,
    0.052359877559829883, 0.069813170079773182, 0.087266462599716474,
    0.10471975511965977, 0.12217304763960307, 0.13962634015954636,
    0.15707963267948966, 0.17453292519943295, 0.19198621771937624,
    0.20943951023931953, 0.22689280275926285, 0.24434609527920614,
    0.26179938779914941, 0.27925268031909273, 0.29670597283903605,
    0.31415926535897931, 0.33161255787892258, 0.3490658503988659,
    0.36651914291880922, 0.38397243543875248, 0.40142572795869574,
    0.41887902047863906, 0.43633231299858238, 0.4537856055185257,
    0.47123889803846897, 0.48869219055841229, 0.50614548307835561,
    0.52359877559829882, 0.54105206811824214, 0.55850536063818546,
    0.57595865315812877, 0.59341194567807209, 0.6108652381980153,
    0.62831853071795862, 0.64577182323790194, 0.66322511575784515,
    0.68067840827778847, 0.69813170079773179, 0.715584993317675,
    0.73303828583761843, 0.75049157835756164, 0.767944870877505,
    0.78539816339744828, 0.80285145591739149, 0.82030474843733492,
    0.83775804095727813, 0.85521133347722145, 0.87266462599716477,
    0.890117918517108, 0.90757121103705141, 0.92502450355699462,
    0.94247779607693793, 0.95993108859688125, 0.97738438111682457,
    0.99483767363676778, 1.0122909661567112, 1.0297442586766543,
    1.0471975511965976, 1.064650843716541, 1.0821041362364843,
    1.0995574287564276, 1.1170107212763709, 1.1344640137963142,
    1.1519173063162575, 1.1693705988362006, 1.1868238913561442,
    1.2042771838760873, 1.2217304763960306, 1.2391837689159739,
    1.2566370614359172, 1.2740903539558606, 1.2915436464758039,
    1.3089969389957472, 1.3264502315156903, 1.3439035240356338,
    1.3613568165555769, 1.3788101090755203, 1.3962634015954636,
    1.4137166941154069, 1.43116998663535, 1.4486232791552935, 1.4660765716752369,
    1.4835298641951802, 1.5009831567151233, 1.5184364492350666, 1.53588974175501,
    1.5533430342749535, 1.5707963267948966 };

  double en;
  static double w[65341];
  int nx;
  int k;
  double wel[181];
  static const double b[361] = { 0.0013888888888888814, 0.0027777777777777627,
    0.0027777777777777983, 0.0027777777777778334, 0.0027777777777778334,
    0.0027777777777777983, 0.0027777777777777627, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777627, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777627, 0.0027777777777777983,
    0.0027777777777778334, 0.0027777777777778334, 0.0027777777777777983,
    0.0027777777777777627, 0.0027777777777777983, 0.0027777777777777983,
    0.0027777777777777627, 0.0027777777777777983, 0.0027777777777778334,
    0.0027777777777777983, 0.0027777777777777627, 0.0027777777777777627,
    0.0027777777777777983, 0.0027777777777778334, 0.0027777777777777983,
    0.0027777777777777627, 0.0027777777777777983, 0.0027777777777777983,
    0.0027777777777777627, 0.0027777777777777983, 0.0027777777777778334,
    0.0027777777777777983, 0.0027777777777777627, 0.0027777777777777983,
    0.0027777777777778334, 0.0027777777777777983, 0.0027777777777777627,
    0.0027777777777777983, 0.0027777777777777983, 0.0027777777777777627,
    0.0027777777777777983, 0.0027777777777778334, 0.0027777777777777983,
    0.0027777777777777627, 0.0027777777777777627, 0.0027777777777777983,
    0.0027777777777778334, 0.0027777777777777983, 0.0027777777777777627,
    0.0027777777777777983, 0.0027777777777778334, 0.0027777777777777983,
    0.0027777777777777627, 0.0027777777777777983, 0.0027777777777777983,
    0.0027777777777777627, 0.0027777777777777983, 0.0027777777777778334,
    0.0027777777777777983, 0.0027777777777777627, 0.0027777777777777983,
    0.002777777777777816, 0.0027777777777777805, 0.0027777777777777627,
    0.0027777777777777983, 0.0027777777777777983, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777983, 0.0027777777777777983,
    0.0027777777777777805, 0.0027777777777777983, 0.002777777777777816,
    0.0027777777777777983, 0.0027777777777777627, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777983, 0.002777777777777816,
    0.0027777777777777983, 0.0027777777777777805, 0.0027777777777777627,
    0.002777777777777816, 0.0027777777777778334, 0.0027777777777777805,
    0.0027777777777777805, 0.0027777777777777805, 0.0027777777777777983,
    0.002777777777777816, 0.0027777777777777983, 0.0027777777777777805,
    0.0027777777777777805, 0.0027777777777777983, 0.002777777777777816,
    0.0027777777777777983, 0.0027777777777777805, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777805, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777805, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777983, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777805, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777805, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777983, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777983, 0.0027777777777777805,
    0.0027777777777777892, 0.0027777777777777983, 0.0027777777777777892,
    0.0027777777777777983, 0.0027777777777777892, 0.0027777777777777892,
    0.0027777777777778069, 0.0027777777777778069, 0.0027777777777777805,
    0.0027777777777777892, 0.0027777777777777983, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777892, 0.0027777777777777983,
    0.0027777777777777892, 0.0027777777777777983, 0.0027777777777777983,
    0.0027777777777777892, 0.0027777777777777983, 0.0027777777777777892,
    0.0027777777777777892, 0.0027777777777777983, 0.0027777777777777892,
    0.0027777777777777983, 0.0027777777777777983, 0.0027777777777777983,
    0.0027777777777778069, 0.0027777777777777805, 0.0027777777777777805,
    0.0027777777777777983, 0.0027777777777777983, 0.0027777777777777892,
    0.0027777777777777939, 0.0027777777777778026, 0.0027777777777777939,
    0.0027777777777777892, 0.0027777777777777939, 0.0027777777777777983,
    0.0027777777777777939, 0.0027777777777777892, 0.0027777777777777939,
    0.0027777777777777983, 0.0027777777777777918, 0.0027777777777777918,
    0.0027777777777777983, 0.0027777777777777961, 0.0027777777777777939,
    0.0027777777777777939, 0.0027777777777777961, 0.0027777777777777939,
    0.0027777777777777926, 0.0027777777777777961, 0.0027777777777777939,
    0.0027777777777777926, 0.0027777777777777944, 0.0027777777777777948,
    0.0027777777777777944, 0.0027777777777777944, 0.0027777777777777944,
    0.0027777777777777948, 0.0027777777777777944, 0.0027777777777777926,
    0.0027777777777777939, 0.0027777777777777961, 0.0027777777777777926,
    0.0027777777777777939, 0.0027777777777777961, 0.0027777777777777939,
    0.0027777777777777939, 0.0027777777777777961, 0.0027777777777777983,
    0.0027777777777777918, 0.0027777777777777918, 0.0027777777777777983,
    0.0027777777777777939, 0.0027777777777777892, 0.0027777777777777939,
    0.0027777777777777983, 0.0027777777777777939, 0.0027777777777777892,
    0.0027777777777777939, 0.0027777777777778026, 0.0027777777777777939,
    0.0027777777777777892, 0.0027777777777777983, 0.0027777777777777983,
    0.0027777777777777805, 0.0027777777777777805, 0.0027777777777778069,
    0.0027777777777777983, 0.0027777777777777983, 0.0027777777777777983,
    0.0027777777777777892, 0.0027777777777777983, 0.0027777777777777892,
    0.0027777777777777892, 0.0027777777777777983, 0.0027777777777777892,
    0.0027777777777777983, 0.0027777777777777983, 0.0027777777777777892,
    0.0027777777777777983, 0.0027777777777777892, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777983, 0.0027777777777777892,
    0.0027777777777777805, 0.0027777777777778069, 0.0027777777777778069,
    0.0027777777777777892, 0.0027777777777777892, 0.0027777777777777983,
    0.0027777777777777892, 0.0027777777777777983, 0.0027777777777777892,
    0.0027777777777777805, 0.0027777777777777983, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777983, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777805, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777805, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777983, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777805, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777805, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777805, 0.0027777777777777983,
    0.002777777777777816, 0.0027777777777777983, 0.0027777777777777805,
    0.0027777777777777805, 0.0027777777777777983, 0.002777777777777816,
    0.0027777777777777983, 0.0027777777777777805, 0.0027777777777777805,
    0.0027777777777777805, 0.0027777777777778334, 0.002777777777777816,
    0.0027777777777777627, 0.0027777777777777805, 0.0027777777777777983,
    0.002777777777777816, 0.0027777777777777983, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777627, 0.0027777777777777983,
    0.002777777777777816, 0.0027777777777777983, 0.0027777777777777805,
    0.0027777777777777983, 0.0027777777777777983, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777983, 0.0027777777777777983,
    0.0027777777777777627, 0.0027777777777777805, 0.002777777777777816,
    0.0027777777777777983, 0.0027777777777777627, 0.0027777777777777983,
    0.0027777777777778334, 0.0027777777777777983, 0.0027777777777777627,
    0.0027777777777777983, 0.0027777777777777983, 0.0027777777777777627,
    0.0027777777777777983, 0.0027777777777778334, 0.0027777777777777983,
    0.0027777777777777627, 0.0027777777777777983, 0.0027777777777778334,
    0.0027777777777777983, 0.0027777777777777627, 0.0027777777777777627,
    0.0027777777777777983, 0.0027777777777778334, 0.0027777777777777983,
    0.0027777777777777627, 0.0027777777777777983, 0.0027777777777777983,
    0.0027777777777777627, 0.0027777777777777983, 0.0027777777777778334,
    0.0027777777777777983, 0.0027777777777777627, 0.0027777777777777983,
    0.0027777777777778334, 0.0027777777777777983, 0.0027777777777777627,
    0.0027777777777777983, 0.0027777777777777983, 0.0027777777777777627,
    0.0027777777777777983, 0.0027777777777778334, 0.0027777777777777983,
    0.0027777777777777627, 0.0027777777777777627, 0.0027777777777777983,
    0.0027777777777778334, 0.0027777777777777983, 0.0027777777777777627,
    0.0027777777777777983, 0.0027777777777777983, 0.0027777777777777627,
    0.0027777777777777983, 0.0027777777777778334, 0.0027777777777778334,
    0.0027777777777777983, 0.0027777777777777627, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777627, 0.0027777777777777983,
    0.0027777777777777983, 0.0027777777777777627, 0.0027777777777777983,
    0.0027777777777778334, 0.0027777777777778334, 0.0027777777777777983,
    0.0027777777777777627, 0.0013888888888888814 };

  coder::array<double, 2U> y;
  double ndbl;
  static double b_y[65341];

  //  Calculate azimuth weights
  //  These weights are needed when there is an non-uniform grid in the azimuth sample points, e.g. for 
  //  parabolic antennas
  //  map to [-pi ... 0 ... pi ]
  //  Calculate elevation weights
  //  These weights are needed when there is an non-uniform grid in the angle sample points, e.g. for 
  //  parabolic antennas
  for (int n = 0; n < 181; n++) {
    double st;
    double d_tmp;
    double d;
    if (n + 1 == 1) {
      st = -1.5707963267948966;
      en = -1.562069680534925;
    } else if (n + 1 == 181) {
      st = 1.562069680534925;
      en = 1.5707963267948966;
    } else {
      st = 0.5 * (dv[n - 1] + dv[n]);
      en = 0.5 * (dv[n] + dv[n + 1]);
    }

    //  The average cosine of the covered angle range
    d_tmp = en - st;
    d = d_tmp * 0.04999999;
    if ((d == 0.0) || ((st < en) && (d < 0.0)) || ((en < st) && (d > 0.0))) {
      y.set_size(1, 0);
    } else if ((std::floor(st) == st) && (std::floor(d) == d)) {
      nx = static_cast<int>(std::floor((en - st) / d));
      y.set_size(1, (nx + 1));
      for (nm1d2 = 0; nm1d2 <= nx; nm1d2++) {
        y[nm1d2] = st + d * static_cast<double>(nm1d2);
      }
    } else {
      double apnd;
      double cdiff;
      double u0;
      double u1;
      ndbl = std::floor(d_tmp / d + 0.5);
      apnd = st + ndbl * d;
      if (d > 0.0) {
        cdiff = apnd - en;
      } else {
        cdiff = en - apnd;
      }

      u0 = std::abs(st);
      u1 = std::abs(en);
      if (u0 > u1) {
        u1 = u0;
      }

      if (std::abs(cdiff) < 4.4408920985006262E-16 * u1) {
        ndbl++;
        apnd = en;
      } else if (cdiff > 0.0) {
        apnd = st + (ndbl - 1.0) * d;
      } else {
        ndbl++;
      }

      if (ndbl >= 0.0) {
        nx = static_cast<int>(ndbl);
      } else {
        nx = 0;
      }

      y.set_size(1, nx);
      if (nx > 0) {
        y[0] = st;
        if (nx > 1) {
          y[nx - 1] = apnd;
          nm1d2 = (nx - 1) / 2;
          for (k = 0; k <= nm1d2 - 2; k++) {
            ndbl = (static_cast<double>(k) + 1.0) * d;
            y[k + 1] = st + ndbl;
            y[(nx - k) - 2] = apnd - ndbl;
          }

          if (nm1d2 << 1 == nx - 1) {
            y[nm1d2] = (st + apnd) / 2.0;
          } else {
            ndbl = static_cast<double>(nm1d2) * d;
            y[nm1d2] = st + ndbl;
            y[nm1d2 + 1] = apnd - ndbl;
          }
        }
      }
    }

    nx = y.size(1);
    for (k = 0; k < nx; k++) {
      y[k] = std::cos(y[k]);
    }

    nx = y.size(1);
    if (y.size(1) == 0) {
      en = 0.0;
    } else {
      en = y[0];
      for (k = 2; k <= nx; k++) {
        en += y[k - 1];
      }
    }

    wel[n] = en / 21.0 * d_tmp / 3.1415926535897931;
  }

  //  Combined azimuth an elevation weights
  for (nm1d2 = 0; nm1d2 < 361; nm1d2++) {
    for (nx = 0; nx < 181; nx++) {
      w[nx + 181 * nm1d2] = wel[nx] * b[nm1d2];
    }
  }

  en = w[0];
  for (k = 0; k < 65340; k++) {
    en += w[k + 1];
  }

  //  Read the qd_arrayant elements
  //  calculate radiation power pattern
  //  Normalize by max value
  //  Calculate Gain
  for (k = 0; k < 65341; k++) {
    ndbl = w[k] / en;
    w[k] = ndbl;
    b_y[k] = ndbl;
  }

  en = b_y[0];
  for (k = 0; k < 65340; k++) {
    en += b_y[k + 1];
  }

  *directivity_dBi = 10.0 * std::log10(1.0 / en);
  *gain_dBi = 0.0;
}

//
// File trailer for beamformingTest.cpp
//
// [EOF]
//
